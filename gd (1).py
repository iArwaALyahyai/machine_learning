# -*- coding: utf-8 -*-
"""GD.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h9mAzJqPq3QU7h9flOJIWucjsGMzbu6J
"""

import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import SGDRegressor
from matplotlib import pyplot as plt
from sklearn.metrics import mean_squared_error

X = 2 * np.random.rand(1000, 1)
y = 4 + 3 * X + np.random.randn(1000, 1) # to add some noise to the data
y_clean = 4 + 3 * X

#GD_model = SGDRegressor(max_iter=1000, eta0=0.001)
#GD_model.fit(X, y.squeeze())

for i in range(10,100,10):
     GD_model = SGDRegressor(max_iter=1, eta0=0.0001,warm_start=True)
     GD_model.fit(X, y.squeeze())
     y_hat = GD_model.predict(X)
     print(i)
     print(GD_model.intercept_, GD_model.coef_)
     print(mean_squared_error(y, y_hat))



y_hat = GD_model.predict(X)

GD_model.intercept_, GD_model.coef_

from sklearn.metrics import mean_squared_error
mean_squared_error(y, y_hat)

GD_model.n_iter_no_change

X_b = np.linspace(X.min(), X.max(), 10).reshape(-1, 1)

def model_ex(max_iter=0, lr=0, line_style=None):
    _model = SGDRegressor(max_iter=max_iter, eta0=lr)
    _model_fit = _model.fit(X, y)
    _y_hat = _model_fit.predict(X)
    mse = mean_squared_error(y_clean, _y_hat)
    print(f"MSE: {mse}")
    _y_hat_b = _model_fit.predict(X_b)
    line_style["label"] += f" - MSE={mse:0.4f}"
    plt.plot(X_b, _y_hat_b, **line_style)

plt.figure(figsize=(10,7))
plt.scatter(X, y)
plt.ylabel("y")
plt.xlabel("X")
# # plt.plot(X_b, y_hat_b)
model_ex(5, 0.001, {"color":"red", "label":"lr=0.001 - itter=5"})
model_ex(10, 0.001, {"color":"green", "label":"lr=0.001 - itter=10"})
model_ex(30, 0.001, {"color":"yellow", "label":"lr=0.001 - itter=30"})
model_ex(3000, 0.001, {"color":"black", "label":"lr=0.001 - itter=3000"})
model_ex(4000, 0.001, {"color":"blue", "label":"lr=0.001 - itter=4000"})
plt.legend()

